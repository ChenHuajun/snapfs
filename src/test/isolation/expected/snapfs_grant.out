Parsed test spec with 3 sessions

starting permutation: s3_mk_sn s1_check s1_g_1 s1_check s3_sw_3 s1_check
step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_check: 
	SELECT grantee, grantor, privilege_type, ( select tableowner from pg_tables where ( table_schema || '.' || table_name ) = ( schemaname || '.' || tablename ) ) FROM information_schema.role_table_grants WHERE table_name = 't1' order by grantor, grantee, privilege_type;
	select count(*) as cnt from t1;

grantee        grantor        privilege_type tableowner     

test_owner     test_owner     DELETE         test_owner     
test_owner     test_owner     INSERT         test_owner     
test_owner     test_owner     REFERENCES     test_owner     
test_owner     test_owner     SELECT         test_owner     
test_owner     test_owner     TRIGGER        test_owner     
test_owner     test_owner     TRUNCATE       test_owner     
test_owner     test_owner     UPDATE         test_owner     
cnt            

10             
step s1_g_1: 
	grant select, insert, update, delete on t1 to test_role1;

step s1_check: 
	SELECT grantee, grantor, privilege_type, ( select tableowner from pg_tables where ( table_schema || '.' || table_name ) = ( schemaname || '.' || tablename ) ) FROM information_schema.role_table_grants WHERE table_name = 't1' order by grantor, grantee, privilege_type;
	select count(*) as cnt from t1;

grantee        grantor        privilege_type tableowner     

test_owner     test_owner     DELETE         test_owner     
test_owner     test_owner     INSERT         test_owner     
test_owner     test_owner     REFERENCES     test_owner     
test_owner     test_owner     SELECT         test_owner     
test_owner     test_owner     TRIGGER        test_owner     
test_owner     test_owner     TRUNCATE       test_owner     
test_owner     test_owner     UPDATE         test_owner     
test_role1     test_owner     DELETE         test_owner     
test_role1     test_owner     INSERT         test_owner     
test_role1     test_owner     SELECT         test_owner     
test_role1     test_owner     UPDATE         test_owner     
cnt            

10             
step s3_sw_3: 
	select pg_switch_to_snapshot( ( select recent_snapshot from pg_control_snapshot() ) );
	select 'СМОТРЕТЬ НИЖЕ';

pg_switch_to_snapshot

               
?column?       

СМОТРЕТЬ НИЖЕ
step s1_check: 
	SELECT grantee, grantor, privilege_type, ( select tableowner from pg_tables where ( table_schema || '.' || table_name ) = ( schemaname || '.' || tablename ) ) FROM information_schema.role_table_grants WHERE table_name = 't1' order by grantor, grantee, privilege_type;
	select count(*) as cnt from t1;

grantee        grantor        privilege_type tableowner     

test_owner     test_owner     DELETE         test_owner     
test_owner     test_owner     INSERT         test_owner     
test_owner     test_owner     REFERENCES     test_owner     
test_owner     test_owner     SELECT         test_owner     
test_owner     test_owner     TRIGGER        test_owner     
test_owner     test_owner     TRUNCATE       test_owner     
test_owner     test_owner     UPDATE         test_owner     
cnt            

10             

starting permutation: s3_mk_sn s1_g_1 s3_mk_sn s1_g_2 s3_mk_sn s3_rc_sn_2 s1_check
step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_g_1: 
	grant select, insert, update, delete on t1 to test_role1;

step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_g_2: 
	alter table t1 owner to test_role2;
	revoke all on t1 from test_role2;
	grant select, update, insert, delete on t1 to test_role2;

step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s3_rc_sn_2: 
  select pg_recover_to_snapshot( ( select recent_snapshot - 1 from pg_control_snapshot() ) );

pg_recover_to_snapshot

               
step s1_check: 
	SELECT grantee, grantor, privilege_type, ( select tableowner from pg_tables where ( table_schema || '.' || table_name ) = ( schemaname || '.' || tablename ) ) FROM information_schema.role_table_grants WHERE table_name = 't1' order by grantor, grantee, privilege_type;
	select count(*) as cnt from t1;

grantee        grantor        privilege_type tableowner     

test_owner     test_owner     DELETE         test_owner     
test_owner     test_owner     INSERT         test_owner     
test_owner     test_owner     REFERENCES     test_owner     
test_owner     test_owner     SELECT         test_owner     
test_owner     test_owner     TRIGGER        test_owner     
test_owner     test_owner     TRUNCATE       test_owner     
test_owner     test_owner     UPDATE         test_owner     
test_role1     test_owner     DELETE         test_owner     
test_role1     test_owner     INSERT         test_owner     
test_role1     test_owner     SELECT         test_owner     
test_role1     test_owner     UPDATE         test_owner     
cnt            

10             

starting permutation: s3_mk_sn s1_check s1_g_1 s1_check s3_sw_3 s1_check
step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_check: 
	SELECT grantee, grantor, privilege_type, ( select tableowner from pg_tables where ( table_schema || '.' || table_name ) = ( schemaname || '.' || tablename ) ) FROM information_schema.role_table_grants WHERE table_name = 't1' order by grantor, grantee, privilege_type;
	select count(*) as cnt from t1;

grantee        grantor        privilege_type tableowner     

test_owner     test_owner     DELETE         test_owner     
test_owner     test_owner     INSERT         test_owner     
test_owner     test_owner     REFERENCES     test_owner     
test_owner     test_owner     SELECT         test_owner     
test_owner     test_owner     TRIGGER        test_owner     
test_owner     test_owner     TRUNCATE       test_owner     
test_owner     test_owner     UPDATE         test_owner     
cnt            

10             
step s1_g_1: 
	grant select, insert, update, delete on t1 to test_role1;

step s1_check: 
	SELECT grantee, grantor, privilege_type, ( select tableowner from pg_tables where ( table_schema || '.' || table_name ) = ( schemaname || '.' || tablename ) ) FROM information_schema.role_table_grants WHERE table_name = 't1' order by grantor, grantee, privilege_type;
	select count(*) as cnt from t1;

grantee        grantor        privilege_type tableowner     

test_owner     test_owner     DELETE         test_owner     
test_owner     test_owner     INSERT         test_owner     
test_owner     test_owner     REFERENCES     test_owner     
test_owner     test_owner     SELECT         test_owner     
test_owner     test_owner     TRIGGER        test_owner     
test_owner     test_owner     TRUNCATE       test_owner     
test_owner     test_owner     UPDATE         test_owner     
test_role1     test_owner     DELETE         test_owner     
test_role1     test_owner     INSERT         test_owner     
test_role1     test_owner     SELECT         test_owner     
test_role1     test_owner     UPDATE         test_owner     
cnt            

10             
step s3_sw_3: 
	select pg_switch_to_snapshot( ( select recent_snapshot from pg_control_snapshot() ) );
	select 'СМОТРЕТЬ НИЖЕ';

pg_switch_to_snapshot

               
?column?       

СМОТРЕТЬ НИЖЕ
step s1_check: 
	SELECT grantee, grantor, privilege_type, ( select tableowner from pg_tables where ( table_schema || '.' || table_name ) = ( schemaname || '.' || tablename ) ) FROM information_schema.role_table_grants WHERE table_name = 't1' order by grantor, grantee, privilege_type;
	select count(*) as cnt from t1;

grantee        grantor        privilege_type tableowner     

test_owner     test_owner     DELETE         test_owner     
test_owner     test_owner     INSERT         test_owner     
test_owner     test_owner     REFERENCES     test_owner     
test_owner     test_owner     SELECT         test_owner     
test_owner     test_owner     TRIGGER        test_owner     
test_owner     test_owner     TRUNCATE       test_owner     
test_owner     test_owner     UPDATE         test_owner     
cnt            

10             

starting permutation: s3_mk_sn s1_g_1 s3_mk_sn s1_g_2 s3_mk_sn s3_rc_sn s1_check
step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_g_1: 
	grant select, insert, update, delete on t1 to test_role1;

step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_g_2: 
	alter table t1 owner to test_role2;
	revoke all on t1 from test_role2;
	grant select, update, insert, delete on t1 to test_role2;

step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s3_rc_sn: 
  select pg_recover_to_snapshot( ( select recent_snapshot from pg_control_snapshot() ) );

pg_recover_to_snapshot

               
step s1_check: 
	SELECT grantee, grantor, privilege_type, ( select tableowner from pg_tables where ( table_schema || '.' || table_name ) = ( schemaname || '.' || tablename ) ) FROM information_schema.role_table_grants WHERE table_name = 't1' order by grantor, grantee, privilege_type;
	select count(*) as cnt from t1;

grantee        grantor        privilege_type tableowner     

test_role1     test_role2     DELETE         test_role2     
test_role1     test_role2     INSERT         test_role2     
test_role1     test_role2     SELECT         test_role2     
test_role1     test_role2     UPDATE         test_role2     
test_role2     test_role2     DELETE         test_role2     
test_role2     test_role2     INSERT         test_role2     
test_role2     test_role2     SELECT         test_role2     
test_role2     test_role2     UPDATE         test_role2     
cnt            

10             

starting permutation: s3_mk_sn s1_check s1_g_1 s1_check s3_sw_3 s1_check
step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_check: 
	SELECT grantee, grantor, privilege_type, ( select tableowner from pg_tables where ( table_schema || '.' || table_name ) = ( schemaname || '.' || tablename ) ) FROM information_schema.role_table_grants WHERE table_name = 't1' order by grantor, grantee, privilege_type;
	select count(*) as cnt from t1;

grantee        grantor        privilege_type tableowner     

test_owner     test_owner     DELETE         test_owner     
test_owner     test_owner     INSERT         test_owner     
test_owner     test_owner     REFERENCES     test_owner     
test_owner     test_owner     SELECT         test_owner     
test_owner     test_owner     TRIGGER        test_owner     
test_owner     test_owner     TRUNCATE       test_owner     
test_owner     test_owner     UPDATE         test_owner     
cnt            

10             
step s1_g_1: 
	grant select, insert, update, delete on t1 to test_role1;

step s1_check: 
	SELECT grantee, grantor, privilege_type, ( select tableowner from pg_tables where ( table_schema || '.' || table_name ) = ( schemaname || '.' || tablename ) ) FROM information_schema.role_table_grants WHERE table_name = 't1' order by grantor, grantee, privilege_type;
	select count(*) as cnt from t1;

grantee        grantor        privilege_type tableowner     

test_owner     test_owner     DELETE         test_owner     
test_owner     test_owner     INSERT         test_owner     
test_owner     test_owner     REFERENCES     test_owner     
test_owner     test_owner     SELECT         test_owner     
test_owner     test_owner     TRIGGER        test_owner     
test_owner     test_owner     TRUNCATE       test_owner     
test_owner     test_owner     UPDATE         test_owner     
test_role1     test_owner     DELETE         test_owner     
test_role1     test_owner     INSERT         test_owner     
test_role1     test_owner     SELECT         test_owner     
test_role1     test_owner     UPDATE         test_owner     
cnt            

10             
step s3_sw_3: 
	select pg_switch_to_snapshot( ( select recent_snapshot from pg_control_snapshot() ) );
	select 'СМОТРЕТЬ НИЖЕ';

pg_switch_to_snapshot

               
?column?       

СМОТРЕТЬ НИЖЕ
step s1_check: 
	SELECT grantee, grantor, privilege_type, ( select tableowner from pg_tables where ( table_schema || '.' || table_name ) = ( schemaname || '.' || tablename ) ) FROM information_schema.role_table_grants WHERE table_name = 't1' order by grantor, grantee, privilege_type;
	select count(*) as cnt from t1;

grantee        grantor        privilege_type tableowner     

test_owner     test_owner     DELETE         test_owner     
test_owner     test_owner     INSERT         test_owner     
test_owner     test_owner     REFERENCES     test_owner     
test_owner     test_owner     SELECT         test_owner     
test_owner     test_owner     TRIGGER        test_owner     
test_owner     test_owner     TRUNCATE       test_owner     
test_owner     test_owner     UPDATE         test_owner     
cnt            

10             
