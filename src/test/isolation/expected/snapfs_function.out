Parsed test spec with 3 sessions

starting permutation: s3_mk_sn s1_c_f s3_mk_sn s1_r_f s3_mk_sn s1_d_f s3_sw_1 s1_check s2_check s3_sw_2 s1_check s2_check s3_sw_3 s1_check s2_check s3_sw_0 s1_check s2_check
step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_c_f: 
	CREATE OR REPLACE FUNCTION get_some_data() RETURNS character varying
	LANGUAGE 'plpgsql' AS $BODY$ BEGIN	RETURN 'some_data'; END; $BODY$;

step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_r_f: 
	CREATE OR REPLACE FUNCTION get_some_data() RETURNS character varying
	LANGUAGE 'plpgsql' AS $BODY$ DECLARE res varchar; BEGIN	select string_agg( name, ' ' ) into res from ( select * from t1 order by id ) as foo; RETURN res; END; $BODY$;

step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_d_f: 
	drop function get_some_data();

step s3_sw_1: 
	select pg_switch_to_snapshot( ( select recent_snapshot - 2 from pg_control_snapshot() ) );

pg_switch_to_snapshot

               
step s1_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist
step s2_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist
step s3_sw_2: 
	select pg_switch_to_snapshot( ( select recent_snapshot - 1 from pg_control_snapshot() ) );

pg_switch_to_snapshot

               
step s1_check: 
	select * from get_some_data();

get_some_data  

some_data      
step s2_check: 
	select * from get_some_data();

get_some_data  

some_data      
step s3_sw_3: 
	select pg_switch_to_snapshot( ( select recent_snapshot from pg_control_snapshot() ) );

pg_switch_to_snapshot

               
step s1_check: 
	select * from get_some_data();

get_some_data  

01 02 03 04 05 06 07 08 09 10
step s2_check: 
	select * from get_some_data();

get_some_data  

01 02 03 04 05 06 07 08 09 10
step s3_sw_0: 
	select pg_switch_to_snapshot( 0 );

pg_switch_to_snapshot

               
step s1_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist
step s2_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist

starting permutation: s3_mk_sn s1_c_f s3_mk_sn s1_r_f s3_mk_sn s1_d_f s1_sb_1 s1_check s2_check s1_sb_2 s1_check s2_check s1_sb_3 s1_check s2_check s1_sb_0 s1_check s2_check
step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_c_f: 
	CREATE OR REPLACE FUNCTION get_some_data() RETURNS character varying
	LANGUAGE 'plpgsql' AS $BODY$ BEGIN	RETURN 'some_data'; END; $BODY$;

step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_r_f: 
	CREATE OR REPLACE FUNCTION get_some_data() RETURNS character varying
	LANGUAGE 'plpgsql' AS $BODY$ DECLARE res varchar; BEGIN	select string_agg( name, ' ' ) into res from ( select * from t1 order by id ) as foo; RETURN res; END; $BODY$;

step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_d_f: 
	drop function get_some_data();

step s1_sb_1: 
	select pg_set_backend_snapshot( ( select recent_snapshot - 2 from pg_control_snapshot() ) );

pg_set_backend_snapshot

               
step s1_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist
step s2_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist
step s1_sb_2: 
	select pg_set_backend_snapshot( ( select recent_snapshot - 1 from pg_control_snapshot() ) );

pg_set_backend_snapshot

               
step s1_check: 
	select * from get_some_data();

get_some_data  

some_data      
step s2_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist
step s1_sb_3: 
	select pg_set_backend_snapshot( ( select recent_snapshot from pg_control_snapshot() ) );

pg_set_backend_snapshot

               
step s1_check: 
	select * from get_some_data();

get_some_data  

01 02 03 04 05 06 07 08 09 10
step s2_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist
step s1_sb_0: 
	select pg_set_backend_snapshot( 0 );

pg_set_backend_snapshot

               
step s1_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist
step s2_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist

starting permutation: s3_mk_sn s1_c_f s3_mk_sn s1_r_f s3_mk_sn s1_d_f s2_sb_1 s1_check s2_check s2_sb_2 s1_check s2_check s1_sb_2 s2_sb_3 s1_check s2_check s1_sb_0 s2_sb_0 s1_check s2_check
step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_c_f: 
	CREATE OR REPLACE FUNCTION get_some_data() RETURNS character varying
	LANGUAGE 'plpgsql' AS $BODY$ BEGIN	RETURN 'some_data'; END; $BODY$;

step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_r_f: 
	CREATE OR REPLACE FUNCTION get_some_data() RETURNS character varying
	LANGUAGE 'plpgsql' AS $BODY$ DECLARE res varchar; BEGIN	select string_agg( name, ' ' ) into res from ( select * from t1 order by id ) as foo; RETURN res; END; $BODY$;

step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_d_f: 
	drop function get_some_data();

step s2_sb_1: 
	select pg_set_backend_snapshot( ( select recent_snapshot - 2 from pg_control_snapshot() ) );

pg_set_backend_snapshot

               
step s1_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist
step s2_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist
step s2_sb_2: 
	select pg_set_backend_snapshot( ( select recent_snapshot - 1 from pg_control_snapshot() ) );

pg_set_backend_snapshot

               
step s1_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist
step s2_check: 
	select * from get_some_data();

get_some_data  

some_data      
step s1_sb_2: 
	select pg_set_backend_snapshot( ( select recent_snapshot - 1 from pg_control_snapshot() ) );

pg_set_backend_snapshot

               
step s2_sb_3: 
	select pg_set_backend_snapshot( ( select recent_snapshot from pg_control_snapshot() ) );

pg_set_backend_snapshot

               
step s1_check: 
	select * from get_some_data();

get_some_data  

some_data      
step s2_check: 
	select * from get_some_data();

get_some_data  

01 02 03 04 05 06 07 08 09 10
step s1_sb_0: 
	select pg_set_backend_snapshot( 0 );

pg_set_backend_snapshot

               
step s2_sb_0: 
	select pg_set_backend_snapshot( 0 );

pg_set_backend_snapshot

               
step s1_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist
step s2_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist

starting permutation: s3_mk_sn s1_c_f s3_mk_sn s1_r_f s3_mk_sn s1_d_f s3_rc_sn_2 s1_check s2_check s1_d_f
step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_c_f: 
	CREATE OR REPLACE FUNCTION get_some_data() RETURNS character varying
	LANGUAGE 'plpgsql' AS $BODY$ BEGIN	RETURN 'some_data'; END; $BODY$;

step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_r_f: 
	CREATE OR REPLACE FUNCTION get_some_data() RETURNS character varying
	LANGUAGE 'plpgsql' AS $BODY$ DECLARE res varchar; BEGIN	select string_agg( name, ' ' ) into res from ( select * from t1 order by id ) as foo; RETURN res; END; $BODY$;

step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_d_f: 
	drop function get_some_data();

step s3_rc_sn_2: 
  select pg_recover_to_snapshot( ( select recent_snapshot - 1 from pg_control_snapshot() ) );

pg_recover_to_snapshot

               
step s1_check: 
	select * from get_some_data();

get_some_data  

some_data      
step s2_check: 
	select * from get_some_data();

get_some_data  

some_data      
step s1_d_f: 
	drop function get_some_data();


starting permutation: s3_mk_sn s1_c_f s3_mk_sn s1_r_f s3_mk_sn s1_d_f s3_rc_sn s1_check s2_check s3_rc_sn s1_check s2_check s3_rc_sn s1_check s2_check s3_mk_sn
step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_c_f: 
	CREATE OR REPLACE FUNCTION get_some_data() RETURNS character varying
	LANGUAGE 'plpgsql' AS $BODY$ BEGIN	RETURN 'some_data'; END; $BODY$;

step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_r_f: 
	CREATE OR REPLACE FUNCTION get_some_data() RETURNS character varying
	LANGUAGE 'plpgsql' AS $BODY$ DECLARE res varchar; BEGIN	select string_agg( name, ' ' ) into res from ( select * from t1 order by id ) as foo; RETURN res; END; $BODY$;

step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
step s1_d_f: 
	drop function get_some_data();

step s3_rc_sn: 
  select pg_recover_to_snapshot( ( select recent_snapshot from pg_control_snapshot() ) );

pg_recover_to_snapshot

               
step s1_check: 
	select * from get_some_data();

get_some_data  

01 02 03 04 05 06 07 08 09 10
step s2_check: 
	select * from get_some_data();

get_some_data  

01 02 03 04 05 06 07 08 09 10
step s3_rc_sn: 
  select pg_recover_to_snapshot( ( select recent_snapshot from pg_control_snapshot() ) );

pg_recover_to_snapshot

               
step s1_check: 
	select * from get_some_data();

get_some_data  

some_data      
step s2_check: 
	select * from get_some_data();

get_some_data  

some_data      
step s3_rc_sn: 
  select pg_recover_to_snapshot( ( select recent_snapshot from pg_control_snapshot() ) );

pg_recover_to_snapshot

               
step s1_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist
step s2_check: 
	select * from get_some_data();

ERROR:  function get_some_data() does not exist
step s3_mk_sn: 
	select 1 from pg_make_snapshot();

?column?       

1              
